import org.apache.tools.ant.filters.ReplaceTokens


buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.50"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE"
        classpath 'com.google.cloud.tools:appengine-gradle-plugin:+'

    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.cloud.tools.appengine-standard'  // App Engine tasks
apply plugin: 'io.spring.dependency-management'

repositories {
    jcenter()
    mavenCentral()
}

group = 'org.mozilla.msrp'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin{
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin{
    kotlinOptions.jvmTarget = "1.8"
}

ext {
    set('springCloudVersion', "Greenwich.SR2")
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    def kotlinx_html_version = "0.6.12"

    // https://docs.spring.io/spring-boot/docs/2.1.6.RELEASE/reference/html/configuration-metadata.html#configuration-metadata-annotation-processor
    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50"
    implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:${kotlinx_html_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-html-js:${kotlinx_html_version}"

    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation 'com.auth0:java-jwt:3.8.3'

    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"

    implementation "org.springframework.cloud:spring-cloud-gcp-starter"

    implementation "org.json:json:20090211"
    developmentOnly "org.springframework.boot:spring-boot-devtools"
    implementation 'com.google.firebase:firebase-admin:6.9.0'
    implementation 'com.google.cloud:google-cloud-storage:1.90.0'
    implementation 'com.google.cloud:google-cloud-pubsub:1.103.0'

    implementation 'javax.inject:javax.inject:1'
    implementation "com.squareup.retrofit2:retrofit:2.4.0"
    implementation "com.squareup.retrofit2:converter-jackson:2.4.0"
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation "com.squareup.okhttp3:logging-interceptor:3.8.1"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.+"
    implementation 'com.squareup.retrofit2:converter-simplexml:2.1.0'

    implementation "com.google.guava:guava:28.1-jre"
    // Lombok
    compileOnly "org.projectlombok:lombok:1.18.8"
    annotationProcessor "org.projectlombok:lombok:1.18.8"

    implementation "com.opencsv:opencsv:4.6"

    implementation 'com.google.apis:google-api-services-youtube:v3-rev212-1.25.0'


    compile group: 'com.zaxxer', name: 'HikariCP', version: '2.7.4'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.8'
    compile group: 'com.google.cloud.sql', name: 'postgres-socket-factory', version: '1.0.15'

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.5.1"
    testImplementation "org.mockito:mockito-core:3.0.0"

}

// required for com.google.cloud.tools.appengine to work. Where is the class path for this?
dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

// appengine versions for various environment
def gaeVersions = "0-31-1"

ext.getDeployConfig = { ->

    def mode = project.hasProperty('mode') ? project.property('mode') : "dev"
    def deployConfig = [mode: mode]

    if (mode == 'dev') {
        deployConfig.gaeProjId = "msrp-dev01"
        deployConfig.stopPreviousVersion = true
        deployConfig.promote = true
        deployConfig.version = gaeVersions
    } else if (mode == 'mirror') {
        deployConfig.gaeProjId = "msrp-mirror01"
        deployConfig.stopPreviousVersion = true
        deployConfig.promote = true
        deployConfig.version = gaeVersions
    } else if (mode == 'stable') {
        deployConfig.gaeProjId = "rocket-dev01"
        deployConfig.stopPreviousVersion = true
        deployConfig.promote = true
        deployConfig.version = gaeVersions
    } else if (mode == 'nightly') {
        deployConfig.gaeProjId = "rocketnightly"
        deployConfig.stopPreviousVersion = true
        deployConfig.promote = true
        deployConfig.version = gaeVersions
    } else if (mode == 'prod') {
        deployConfig.gaeProjId = "zerda-dcf76"
        deployConfig.stopPreviousVersion = false
        deployConfig.promote = false
        deployConfig.version = gaeVersions
    } else {
        // use dev setting as default
        deployConfig.gaeProjId = "msrp-dev01"
        deployConfig.stopPreviousVersion = true
        deployConfig.promote = true
        deployConfig.version = gaeVersions
    }

    return deployConfig
}


appengine {

    deploy { // deploy configuration

        // calling the previous method for configuration
        def config = getDeployConfig()

        projectId = config.gaeProjId
        version = config.version
        stopPreviousVersion = config.stopPreviousVersion  // default - stop the current version
        promote = config.promote              // default - & make this the current version
    }
}

// prints out deploy config
appengineStage.doLast {
    println getDeployConfig()
}


ext.getGaeWebXmlConfig = {
    def mode = getDeployConfig().mode
    def gaeInstanceClass = 'F1'
    def maxInstances = '2'
    def minInstances = '0'
    def springProfilesActive = ''' 
            <property name="spring.profiles.active" value="dev" />
        '''

    if (mode == 'stable') {
        springProfilesActive = ''' 
            <property name="spring.profiles.active" value="stable" />
        '''
    } else if (mode == 'nightly') {
        springProfilesActive = ''' 
            <property name="spring.profiles.active" value="nightly" />
        '''
        maxInstances = '4'
        minInstances = '2'
    } else if (mode == 'prod') {
        springProfilesActive = ''' 
            <property name="spring.profiles.active" value="prod" />
        '''
        gaeInstanceClass = 'F4_1G'
        maxInstances = '24'
        minInstances = '2'
    } else if (mode == 'mirror') {
        springProfilesActive = ''' 
            <property name="spring.profiles.active" value="mirror" />
        '''
    }

    def props = [
            GAE_INSTANCE_CLASS    : gaeInstanceClass,
            MAX_INSTANCES         : maxInstances,
            MIN_INSTANCES         : minInstances,
            SPRING_PROFILES_ACTIVE: springProfilesActive
    ]
    return props
}

explodeWar {
    with copySpec {
        from 'src/main/webapp/WEB-INF/appengine-web.xml'
        into 'WEB-INF'
        filter(ReplaceTokens, tokens: getGaeWebXmlConfig())
    }
}
